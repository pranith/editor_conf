(package-initialize)

;; default load path for el files
(add-to-list 'load-path "~/.emacs.d/lisp")

;; sr-speedbar for source tree traversal
(require 'sr-speedbar)
;; evil-mode - Thanks for all the fish, Vim!
(require 'evil)
(evil-mode 1)
;; Bind some useful keys in the gtags select buffer that evil overrides.
(add-hook 'gtags-select-mode-hook
	  (lambda ()
	    (evil-define-key 'normal gtags-select-mode-map (kbd "RET") 'gtags-select-tag)
	    (evil-define-key 'normal gtags-select-mode-map (kbd "q") 'kill-buffer-and-window)))
;; sr-speedbar config
(setq sr-speedbar-right-side nil)
(setq sr-speedbar-skip-other-window-p t)
(setq sr-speedbar-auto-refresh t)
;; (setq sr-speedbar-max-width-x 20)
;; (setq sr-speedbar-width 20)

;; regular speedbar config
(setq speedbar-show-unknown-files t)
(setq speedbar-verbosity-level 0)
;; (setq speedbar-use-images nil)

;; open it on startup
;; needs to be called in this hook for proper sizing
(add-hook 'window-setup-hook (lambda () (sr-speedbar-open) (other-window 1)
(with-current-buffer sr-speedbar-buffer-name
  (setq window-size-fixed 'width))))

;; Setup speedbar, an additional frame for viewing source files
;;(autoload 'speedbar-frame-mode "speedbar" "Popup a speedbar frame" t)
;;(autoload 'speedbar-get-focus "speedbar" "Jump to speedbar frame" t)
;;(autoload 'speedbar-toggle-etags "speedbar" "Add argument to etags command" t)
;;(setq speedbar-frame-plist '(minibuffer nil
;;                             border-width 0
;;                             internal-border-width 0
;;                             menu-bar-lines 0
;;                             modeline t
;;                             name "SpeedBar"
;;                             width 24
;;                            unsplittable t))
;;(condition-case err
;;	(progn (speedbar-toggle-etags "-C"))
;;  	(error (message "Unable to load Speedbar package.")))

(require 'org)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)

(setq org-agenda-files (list "~/devops/Dropbox/work/log.org"))

(setq org-latex-to-pdf-process '("texi2dvi --pdf --clean --verbose --batch %f"))
(setq org-export-latex-hyperref-format "\\ref{%s}")

(require 'color-theme-sanityinc-solarized)

;; @see https://bitbucket.org/lyro/evil/issue/511/let-certain-minor-modes-key-bindings
(eval-after-load 'ggtags
  '(progn
     (evil-make-overriding-map ggtags-mode-map 'normal)
     ;; force update evil keymaps after ggtags-mode loaded
     (add-hook 'ggtags-mode-hook #'evil-normalize-keymaps)))

;; global+speedbar for autocompletion
(setq load-path (cons "/usr/share/emacs/site-lisp/global/gtags.el" load-path))
(autoload 'gtags-mode "gtags" "" t)
(add-hook 'c++-mode-hook
   '(lambda ()
      (gtags-mode t)
      (global-set-key (kbd "M-]") 'gtags-find-symbol)
      (global-set-key (kbd "M-[") 'gtags-find-rtag)
))

(require 'auto-complete-clang)
(setq clang-completion-suppress-error 't)

(add-hook 'c-mode-common-hook
    '(lambda ()
      (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
        (c-set-style "linux")
        (ggtags-mode 1)
        (global-set-key (kbd "M-]") 'gtags-find-symbol)
        (global-set-key (kbd "M-[") 'gtags-find-rtag))))
 
(require 'auto-complete-config)
(ac-config-default)

(defun my-c-mode-common-hook()
  (setq ac-auto-start t)
  (setq ac-expand-on-auto-complete nil)
  (setq ac-quick-help-delay 0.3)
  (setq ac-ignore-case t)
  (setq ac-auto-show-menu t)
  (define-key c-mode-base-map (kbd "M-/") 'ac-complete-clang)
)

(c-set-offset 'substatement-open 0)
;; smart-tab https://github.com/genehack/smart-tab
(require 'smart-tab)
(global-smart-tab-mode 1)

;; Setup save options (auto and backup) -- still buggy need new Replace func
(setq auto-save-timeout 2000)

;; Setup time mode
(autoload 'display-time "time" "Display Time" t)
(condition-case err
    (display-time)
  (error (message "Unable to load Time package.")))
(setq display-time-24hr-format nil)
(setq display-time-day-and-date t)

;; Setup text mode
(add-hook 'text-mode-hook '(lambda() (auto-fill-mode 1)))
(add-hook 'text-mode-hook '(lambda() (setq fill-column 78)))

;; Setup C mode
(autoload 'c++-mode  "cc-mode" "C++ Editing Mode" t)
(autoload 'c-mode    "cc-mode" "C Editing Mode" t)
(autoload 'c-mode-common-hook "cc-mode" "C Mode Hooks" t)
(autoload 'c-add-style "cc-mode" "Add coding style" t)

;; search word at point
(load-library "highlight-symbol")
(global-set-key (kbd "C-x *") 'highlight-symbol-next)
(global-set-key (kbd "C-*") 'highlight-symbol-prev)

(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
; Start speedbar automatically if we're using a window system like X, etc
;(when window-system (speedbar t))

;; show line numbers
(linum-mode 1)

;; Setup text mode
(add-hook 'text-mode-hook '(lambda() (auto-fill-mode 1)))
(add-hook 'text-mode-hook '(lambda() (setq fill-column 78)))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
 '(ansi-color-names-vector
   (vector "#839496" "#dc322f" "#859900" "#b58900" "#268bd2" "#d33682" "#2aa198" "#002b36"))
 '(custom-enabled-themes (quote (sanityinc-solarized-dark)))
 '(custom-safe-themes
   (quote
    ("4cf3221feff536e2b3385209e9b9dc4c2e0818a69a1cdb4b522756bcdf4e00a4" "4aee8551b53a43a883cb0b7f3255d6859d766b6c5e14bcb01bed572fcbef4328" "fc5fcb6f1f1c1bc01305694c59a1a861b008c534cae8d0e48e4d5e81ad718bc6" default)))
 '(display-time-mode t)
 '(fci-rule-color "#073642")
 '(inhibit-startup-screen t)
 '(org-file-apps
   (quote
    ((auto-mode . emacs)
     ("\\.mm\\'" . default)
     ("\\.x?html?\\'" . default)
     ("\\.pdf\\'" . "evince %s"))))
 '(package-selected-packages
   (quote
    (circe color-theme-sanityinc-solarized flycheck auctex magit sml-mode org nlinum ggtags evil-jumper)))
 '(safe-local-variable-values
   (quote
    ((c-tab-always-indent)
     (c-hanging-braces-alist
      (brace-list-open)
      (brace-list-close)
      (block-close . c-snug-do-while)
      (substatement-open before after))
     (c-default-style "linux")
     (c-hanging-braces-alist
      (substatement-open before after))
     (c-set-offset
      (quote substatement-open)
      0)
     (c-tab-always-indent . t)
     (c-default-style "bsd"))))
 '(save-place-mode t)
 '(sr-speedbar-default-width 20)
 '(sr-speedbar-max-width 20)
 '(vc-annotate-background nil)
 '(vc-annotate-color-map
   (quote
    ((20 . "#dc322f")
     (40 . "#cb4b16")
     (60 . "#b58900")
     (80 . "#859900")
     (100 . "#2aa198")
     (120 . "#268bd2")
     (140 . "#d33682")
     (160 . "#6c71c4")
     (180 . "#dc322f")
     (200 . "#cb4b16")
     (220 . "#b58900")
     (240 . "#859900")
     (260 . "#2aa198")
     (280 . "#268bd2")
     (300 . "#d33682")
     (320 . "#6c71c4")
     (340 . "#dc322f")
     (360 . "#cb4b16"))))
 '(vc-annotate-very-old-color nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "Monaco" :foundry "unknown" :slant normal :weight normal :height 113 :width normal)))))

(autoload 'markdown-mode "markdown-mode"
    "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;; add line numbers
(add-hook 'prog-mode-hook 'linum-mode)
(defun linum-format-func (line)
  (let ((w (length (number-to-string (count-lines (point-min) (point-max))))))
     (propertize (format (format "%%%dd " w) line) 'face 'linum)))
(setq linum-format 'linum-format-func)
;;(setq linum-format " %d ")
;;(setq-default left-fringe-width  10)
;;(set-face-attribute 'fringe nil :background "black")

;; marmalade package repository
(require 'package)
  (push '("marmalade" . "http://marmalade-repo.org/packages/")
        package-archives )
  (push '("melpa" . "http://melpa.milkbox.net/packages/")
        package-archives)
  (package-initialize)

;; magit settings
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)


(require 'xcscope)

;; save last line
(setq save-place-file "~/.emacs.d/saved-places")
(require 'saveplace)
(setq-default save-place t)

;; Force gdb-mi to not dedicate any windows
(defadvice gdb-display-buffer (after undedicate-gdb-display-buffer)
  (set-window-dedicated-p ad-return-value nil))
(ad-activate 'gdb-display-buffer)

(defadvice gdb-set-window-buffer (after undedicate-gdb-set-window-buffer (name &optional ignore-dedi window))
  (set-window-dedicated-p window nil))
(ad-activate 'gdb-set-window-buffer)

; (require 'flymake)

(defun flymake-get-tex-args (file-name)
(list "pdflatex"
(list "-file-line-error" "-draftmode" "-interaction=nonstopmode" file-name)))

; (add-hook 'LaTeX-mode-hook 'flymake-mode)

(setq ispell-program-name "aspell") ; could be ispell as well, depending on your preferences
(setq ispell-dictionary "english") ; this can obviously be set to any language your spell-checking program supports

(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-buffer)

(defun turn-on-outline-minor-mode ()
(outline-minor-mode 1))

; (add-hook 'LaTeX-mode-hook 'turn-on-outline-minor-mode)
; (add-hook 'latex-mode-hook 'turn-on-outline-minor-mode)
(setq outline-minor-mode-prefix "\C-c \C-o") ; Or something else
	
(setq-default TeX-master "main")

(setq scroll-step 1)
(setq scroll-conservatively 10000)
(setq auto-window-vscroll nil)

;; You have mail... in emacs!
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
(require 'mu4e)

;; default
(setq mu4e-maildir "~/devops/Maildir")
(setq mu4e-drafts-folder "/[gmail].drafts")
(setq mu4e-sent-folder   "/[gmail].sent_mail")
(setq mu4e-trash-folder  "/[gmail].trash")

;; don't save message to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

;; setup some handy shortcuts
;; you can quickly switch to your Inbox -- press ``ji''
;; then, when you want archive some messages, move them to
;; the 'All Mail' folder by pressing ``ma''.

(setq mu4e-maildir-shortcuts
      '( ("/inbox"               . ?i)
         ("/[gmail].sent_mail"   . ?s)
         ("/[gmail].trash"       . ?t)
         ("/[gmail].all_mail"    . ?a)
         ("/dev.lkml"            . ?l)
         ("/dev.qemu"            . ?q)))

;; allow for updating mail using 'U' in the main view:
(setq
   mu4e-get-mail-command "offlineimap"   ;; or fetchmail, or ...
   mu4e-update-interval 600)             ;; update every 10 minutes

;; something about ourselves
(setq
 user-mail-address "bobby.prani@gmail.com"
 user-full-name  "Pranith Kumar"
 message-signature
 (concat
  "Pranith\n"))

;; sending mail -- replace USERNAME with your gmail username
;; also, make sure the gnutls command line utils are installed
;; package 'gnutls-bin' in Debian/Ubuntu

(require 'smtpmail)
(setq message-send-mail-function 'smtpmail-send-it
    smtpmail-stream-type 'starttls
    smtpmail-default-smtp-server "smtp.gmail.com"
    smtpmail-smtp-server "smtp.gmail.com"
    smtpmail-auth-credentials
    (expand-file-name "~/.authinfo.gpg")
    smtpmail-smtp-service 587)

;; don't keep message buffers around
(setq message-kill-buffer-on-exit t)

;; do not show duplicates
(setq mu4e-headers-skip-duplicates t)

;; shortcut to start mu4e
(global-set-key (kbd "C-x e") 'mu4e)

;; create backups
(setq backup-directory-alist `(("." . "~/.saves")))
(setq backup-by-copying t)
(setq delete-old-versions t
  kept-new-versions 6
  kept-old-versions 2
  version-control t)

(load-file "~/.private.el")
;; circe IRC client
(("oftc"
  :nick "pranith"
  :channels ("#linux-rt #kernelnewbies #qemu" "#qsim" "#qemu-gsoc" "#qemu-mttcg")
  :nickserv-password ,oftc-password)))
(setq circe-reduce-lurker-spam t)

;; start emacs server
(server-start)

(byte-recompile-directory (expand-file-name "~/.emacs.d") 0)
;; Add final message so using C-h l I can see if .emacs failed
(message ".emacs loaded successfully.")
